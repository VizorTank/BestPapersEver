#pragma kernel BitonicSort
#pragma kernel Sort2
#pragma kernel BitonicSort2
#pragma kernel BitonicSort3
// #pragma kernel FindStartValue

// groupshared uint Array[1024];
RWStructuredBuffer<int> Array;
int ArrayLength;

// Parameter is SV_GroupIndex
[numthreads(1024, 1, 1)]
void BitonicSort(uint3 id : SV_DispatchThreadID)//uint localIdxFlattened : SV_GroupIndex)
{
    uint arraySizePowerOfTwo = 2 << (firstbithigh(ArrayLength));
    uint idx = id.x;

    // while (arraySizePowerOfTwo < ArrayLength)
    //     arraySizePowerOfTwo <<= 1;
    
    AllMemoryBarrierWithGroupSync();
    for (uint bucketSize = 2; bucketSize <= arraySizePowerOfTwo; bucketSize *= 2)
    {
        uint bucketId = idx / bucketSize;
        uint direction = bucketId % 2;
        for (uint compareShift = bucketSize >> 1; compareShift > 0; compareShift /= 2)
        {
            AllMemoryBarrierWithGroupSync();
            if (idx < ArrayLength && idx % (compareShift * 2) < compareShift)
            {
                uint index         = direction == 0 ?                idx : idx + compareShift;
                uint swapElemIndex = direction == 0 ? idx + compareShift :                idx;
                
                if(swapElemIndex < ArrayLength && index < ArrayLength)
                {
                    if(Array[index] > Array[swapElemIndex])
                    {
                        uint temp = Array[index];
                        Array[index] = Array[swapElemIndex];
                        Array[swapElemIndex] = temp;
                    }
                }
            }
            AllMemoryBarrierWithGroupSync();
        }
    }
}

[numthreads(1, 1, 1)]
void Sort2(uint3 id : SV_DispatchThreadID)
{
    int n = ArrayLength;
    for (int k = 2; k <= n; k *= 2) // k is doubled every iteration
        for (int j = k/2; j > 0; j /= 2) // j is halved at every iteration, with truncation of fractional parts
            for (int i = 0; i < n; i++)
            {
                int l = i ^ j; // in C-like languages this is "i ^ j"
                if (l > i)
                    if ((i & k == 0) && (Array[i] > Array[l]) ||
                        (i & k != 0) && (Array[i] < Array[l]))
                    {
                        int temp = Array[i];
                        Array[i] = Array[l];
                        Array[l] = temp;
                    }

            }
}

[numthreads(1, 1, 1)]
void BitonicSort2(uint3 id : SV_DispatchThreadID)//uint localIdxFlattened : SV_GroupIndex)
{
    uint arraySizePowerOfTwo = 2 << (firstbithigh(ArrayLength));
    

    // while (arraySizePowerOfTwo < ArrayLength)
    //     arraySizePowerOfTwo <<= 1;
    
    // AllMemoryBarrierWithGroupSync();
    for (uint bucketSize = 2; bucketSize <= arraySizePowerOfTwo; bucketSize *= 2)
    {
        for (uint compareShift = bucketSize >> 1; compareShift > 0; compareShift /= 2)
        {
            // AllMemoryBarrierWithGroupSync();
            for (int i = 0; i < ArrayLength; i++)
            {
                uint idx = i;
                uint bucketId = idx / bucketSize;
                uint direction = bucketId % 2;
                if (idx < ArrayLength && idx % (compareShift * 2) < compareShift)
                {
                    uint index         = direction == 0 ?                idx : idx + compareShift;
                    uint swapElemIndex = direction == 0 ? idx + compareShift :                idx;
                    
                    if(swapElemIndex < ArrayLength && index < ArrayLength)
                    {
                        if(Array[index] < Array[swapElemIndex])
                        {
                            uint temp = Array[index];
                            Array[index] = Array[swapElemIndex];
                            Array[swapElemIndex] = temp;
                        }
                    }
                }
            }
            // AllMemoryBarrierWithGroupSync();
        }
    }
}

[numthreads(1, 1, 1)]
void BitonicSort3(uint3 id : SV_DispatchThreadID)//uint localIdxFlattened : SV_GroupIndex)
{
    uint arraySizePowerOfTwo = 2 << (firstbithigh(ArrayLength));
    

    // while (arraySizePowerOfTwo < ArrayLength)
    //     arraySizePowerOfTwo <<= 1;
    
    AllMemoryBarrier();
    for (uint bucketSize = 2; bucketSize <= arraySizePowerOfTwo; bucketSize *= 2)
    {
        for (uint compareShift = bucketSize >> 1; compareShift > 0; compareShift /= 2)
        {
            // AllMemoryBarrierWithGroupSync();
            for (int i = 0; i < ArrayLength / 2; i++)
            {
                uint idx = i + id.x * ArrayLength / 2;
                uint bucketId = idx / bucketSize;
                uint direction = bucketId % 2;
                if (idx < ArrayLength && idx % (compareShift * 2) < compareShift)
                {
                    uint index         = direction == 0 ?                idx : idx + compareShift;
                    uint swapElemIndex = direction == 0 ? idx + compareShift :                idx;
                    
                    if(swapElemIndex < ArrayLength && index < ArrayLength)
                    {
                        if(Array[index] < Array[swapElemIndex])
                        {
                            uint temp = Array[index];
                            Array[index] = Array[swapElemIndex];
                            Array[swapElemIndex] = temp;
                        }
                    }
                }
            }
            AllMemoryBarrier();
        }
    }
}