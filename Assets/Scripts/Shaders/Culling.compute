#pragma kernel Vote
#pragma kernel Scan
#pragma kernel ScanGroupSums
#pragma kernel Compact
#pragma kernel ResetArgs
#pragma kernel BitonicSort
#pragma kernel FindStartValue

#define NUM_THREAD_GROUPS_X 64

// struct BlockType {
//     int isSolid;
// };

struct BlockSideData {
    float3 position;
    int rotation;
    int type;
};


// Position is id
// RWStructuredBuffer<BlockType> _BlockTypesBuffer;
RWStructuredBuffer<int> _BlockIdsBuffer;
RWStructuredBuffer<int> _BlockIsTransparentBuffer;

// int isValidFront;
// int isValidBack;
// int isValidBot;
// int isValidTop;
// int isValidRight;
// int isValidLeft;

StructuredBuffer<int> _BlockIdsBufferBack;
StructuredBuffer<int> _BlockIdsBufferFront;
StructuredBuffer<int> _BlockIdsBufferTop;
StructuredBuffer<int> _BlockIdsBufferBot;
StructuredBuffer<int> _BlockIdsBufferLeft;
StructuredBuffer<int> _BlockIdsBufferRight;


// RWStructuredBuffer<GrassData> _GrassDataBuffer;
// RWStructuredBuffer<GrassData> _CulledGrassOutputBuffer;
RWStructuredBuffer<BlockSideData> _BlockSideDataBuffer;
RWStructuredBuffer<BlockSideData> _CulledBlockSideDataOutputBuffer;

RWStructuredBuffer<uint> _ArgsBuffer;
RWStructuredBuffer<uint> _Size;

// block count * 3 sides (only 3 sides can be visible)
RWStructuredBuffer<uint> _VoteBuffer;
RWStructuredBuffer<uint> _ScanBuffer;
RWStructuredBuffer<uint> _GroupSumArray;
RWStructuredBuffer<uint> _GroupSumArrayIn;
RWStructuredBuffer<uint> _GroupSumArrayOut;

float4x4 MATRIX_VP;
int _NumOfGroups;
groupshared uint temp[2 * NUM_THREAD_GROUPS_X];
groupshared uint grouptemp[2 * 1024];

// float _Distance;
// float3 _CameraPosition;
int3 _ChunkSize; 

static const int3 neighbours[6] = {
    int3(0, 0, -1),
    int3(0, 0, 1),
    int3(0, 1, 0),
    int3(0, -1, 0),
    int3(-1, 0, 0),
    int3(1, 0, 0)
};

int GetIndex(int3 pos) {
    return pos.x + (pos.y + pos.z * _ChunkSize.y) * _ChunkSize.x;
}

int GetIndexMod(int3 pos)
{
    pos.x = (pos.x + _ChunkSize.x) % _ChunkSize.x;
    pos.y = (pos.y + _ChunkSize.y) % _ChunkSize.y;
    pos.z = (pos.z + _ChunkSize.z) % _ChunkSize.z;
    return GetIndex(pos);
}

int GetNeighbourData(int3 pos, int rotation)
{
    int index = GetIndexMod(pos);
    switch (rotation)
    {
        case 0: return _BlockIdsBufferBack[index];
        case 1: return _BlockIdsBufferFront[index];
        case 2: return _BlockIdsBufferTop[index];
        case 3: return _BlockIdsBufferBot[index];
        case 4: return _BlockIdsBufferLeft[index];
        case 5: return _BlockIdsBufferRight[index];
    }
    return 1;
}

// Per block side
[numthreads(128, 1, 1)]
void Vote(uint3 id : SV_DispatchThreadID)
{
    _VoteBuffer[id.x] = 0;
    // If is air remove side
    if (_BlockSideDataBuffer[id.x].type == 0) return;

    int3 position = _BlockSideDataBuffer[id.x].position.xyz + neighbours[_BlockSideDataBuffer[id.x].rotation];
    // _VoteBuffer[id.x] = _BlockTypesBuffer[GetIndex(position)].isSolid;
    int neighbourType = 0;
    if (position.x >= _ChunkSize.x || position.x < 0 ||
        position.y >= _ChunkSize.y || position.y < 0 ||
        position.z >= _ChunkSize.z || position.z < 0)
        neighbourType = GetNeighbourData(position, _BlockSideDataBuffer[id.x].rotation);
    else
        neighbourType = _BlockIdsBuffer[GetIndex(position)];
    
    if (neighbourType == 0)
        _VoteBuffer[id.x] = 1;
    else if (neighbourType != _BlockSideDataBuffer[id.x].type)
        _VoteBuffer[id.x] = _BlockIsTransparentBuffer[neighbourType];
}

// From GPU Gems Chapter 39 'Parallel Prefix Sum (Scan) with CUDA'
[numthreads(NUM_THREAD_GROUPS_X, 1, 1)]
void Scan(uint3 id : SV_DISPATCHTHREADID, uint groupIndex : SV_GROUPINDEX, uint3 _groupID : SV_GROUPID, uint3 groupThreadID : SV_GROUPTHREADID) {
    int tid = (int) id.x;
    int groupTID = (int) groupThreadID.x;
    int groupID = (int) _groupID.x;

    int offset = 1;
    temp[2 * groupTID] = _VoteBuffer[2 * tid];
    temp[2 * groupTID + 1] = _VoteBuffer[2 * tid + 1];
    int d;
    int numElements = 2 * NUM_THREAD_GROUPS_X;

    for (d = numElements >> 1; d > 0; d >>= 1) {
        GroupMemoryBarrierWithGroupSync();

        if (groupTID < d) {
            int ai = offset * (2 * groupTID + 1) - 1;
            int bi = offset * (2 * groupTID + 2) - 1;
            temp[bi] += temp[ai];
        }

        offset *= 2;
    }

    if (groupTID == 0) {
        _GroupSumArray[_groupID.x] = temp[numElements - 1];
        temp[numElements - 1] = 0;
    }

    for (d = 1; d < numElements; d *= 2) {
        offset >>= 1;

        GroupMemoryBarrierWithGroupSync();
        if (groupTID < d) {
            int ai = offset * (2 * groupTID + 1) - 1;
            int bi = offset * (2 * groupTID + 2) - 1;
            int t = temp[ai];
            temp[ai] = temp[bi];
            temp[bi] += t;
        }
    }

    GroupMemoryBarrierWithGroupSync();

    _ScanBuffer[2 * tid] = temp[2 * groupTID];
    _ScanBuffer[2 * tid + 1] = temp[2 * groupTID + 1];
}

// From GPU Gems Chapter 39 'Parallel Prefix Sum (Scan) with CUDA'
[numthreads(1024, 1, 1)]
void ScanGroupSums(uint3 id : SV_DISPATCHTHREADID, uint groupIndex : SV_GROUPINDEX, uint3 _groupID : SV_GROUPID, uint3 groupThreadID : SV_GROUPTHREADID) {
    int tid = (int) id.x;
    int groupTID = (int) groupThreadID.x;
    int groupID = (int) _groupID.x;

    int offset = 1;
    grouptemp[2 * groupTID] = _GroupSumArrayIn[2 * tid];
    grouptemp[2 * groupTID + 1] = _GroupSumArrayIn[2 * tid + 1];
    int d;

    for (d = _NumOfGroups >> 1; d > 0; d >>= 1) {
        GroupMemoryBarrierWithGroupSync();

        if (groupTID < d) {
            int ai = offset * (2 * groupTID + 1) - 1;
            int bi = offset * (2 * groupTID + 2) - 1;
            grouptemp[bi] += grouptemp[ai];
        }

        offset *= 2;
    }

    if (tid == 0)
        grouptemp[_NumOfGroups - 1] = 0;

    for (d = 1; d < _NumOfGroups; d *= 2) {
        offset >>= 1;

        GroupMemoryBarrierWithGroupSync();
        if (tid < d) {
            int ai = offset * (2 * groupTID + 1) - 1;
            int bi = offset * (2 * groupTID + 2) - 1;
            int t = grouptemp[ai];
            grouptemp[ai] = grouptemp[bi];
            grouptemp[bi] += t;
        }
    }

    GroupMemoryBarrierWithGroupSync();

    _GroupSumArrayOut[2 * tid] = grouptemp[2 * tid];
    _GroupSumArrayOut[2 * tid + 1] = grouptemp[2 * tid + 1];
}

[numthreads(128, 1, 1)]
void Compact(uint3 id : SV_DISPATCHTHREADID, uint groupIndex : SV_GROUPINDEX, uint3 _groupID : SV_GROUPID, uint3 groupThreadID : SV_GROUPTHREADID) {
    uint tid = id.x;
    uint groupID = _groupID.x;
    uint groupSum = groupID.x > 0 ? _GroupSumArray[groupID.x] : 0;
    bool inCamera = _VoteBuffer[id.x];
    
    if (inCamera == 1) {
        InterlockedAdd(_Size[0], 1);
        _CulledBlockSideDataOutputBuffer[_ScanBuffer[tid] + groupSum] = _BlockSideDataBuffer[tid];
    }
}

[numthreads(1, 1, 1)]
void ResetArgs(uint3 id : SV_DISPATCHTHREADID) {
    _ArgsBuffer[1] = (uint)0;
}

StructuredBuffer<uint> _SizeReadOnly;

[numthreads(1024, 1, 1)]
void BitonicSort(uint3 id : SV_DispatchThreadID)
{
    uint ArrayLength = _SizeReadOnly[0];

    uint arraySizePowerOfTwo = 2 << firstbithigh(ArrayLength);
    AllMemoryBarrierWithGroupSync();
    for (uint bucketSize = 2; bucketSize <= arraySizePowerOfTwo; bucketSize *= 2)
    {
        uint bucketId = id.x / bucketSize;
        uint direction = bucketId % 2;
        for (uint compareShift = bucketSize >> 1; compareShift > 0; compareShift /= 2)
        {
            if (id.x < ArrayLength && id.x % (compareShift * 2) < compareShift)
            {
                uint index         = direction == 0 ?                id.x : id.x + compareShift;
                uint swapElemIndex = direction == 0 ? id.x + compareShift :                id.x;
                
                if(swapElemIndex < ArrayLength && index < ArrayLength)
                {
                    if(_CulledBlockSideDataOutputBuffer[index].type > _CulledBlockSideDataOutputBuffer[swapElemIndex].type)
                    {
                        BlockSideData temp = _CulledBlockSideDataOutputBuffer[index];
                        _CulledBlockSideDataOutputBuffer[index] = _CulledBlockSideDataOutputBuffer[swapElemIndex];
                        _CulledBlockSideDataOutputBuffer[swapElemIndex] = temp;
                    }
                }
            }
            AllMemoryBarrierWithGroupSync();
        }
    }
}
RWStructuredBuffer<int> _ShiftValue;
int _lookedValue;

[numthreads(1024, 1, 1)]
void FindStartValue(uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;
    if (idx >= _SizeReadOnly[0]) return;
    if (_CulledBlockSideDataOutputBuffer[idx].type == _lookedValue)
    {
        InterlockedAdd(_ArgsBuffer[1], 1);
        if (idx == 0) _ShiftValue[0] = 0;
        else if (_CulledBlockSideDataOutputBuffer[idx - 1].type != _lookedValue) _ShiftValue[0] = idx;
    }
}